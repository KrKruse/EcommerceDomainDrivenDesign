@page "/Categories"
@page "/Categories/{NameOfCategory}"
@inject ICategoryService _categoryService
@inject IBasketService _basketService
@inject IProductService _productService
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorage
@inject IToastService _toastService

<h3>@categoryModel.CategoryName</h3>

@if (ProductList == null)
{
    <span>Loading...</span>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody >
        @foreach (var prod in ProductList)
        {
            <tr>
                <td>@prod.ProductName</td>
                <td>@prod.Description</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowEditProduct(prod.ProductName, categoryModel.CategoryName))">Rediger Produkt</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => AddtoBaskett(prod))">Tilføj til kurv</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => DeleteProduct(prod.ProductId))">Slet Produkt</button>
                </td>
            </tr>
        }
        <td>
            <button class="btn btn-primary" @onclick="(() => ShowCreateProduct(categoryModel.CategoryName))"><i class="oi oi-action-redo"></i></button>
        </td>
        </tbody>
    </table>

}

@code {
    [Parameter]
    public string NameOfCategory { get; set; }

    public List<CategoryModel> CategoryList { get; set; }

    public List<ProductModel> ProductList { get; set; }

    CategoryModel categoryModel = new CategoryModel();

    protected override async Task OnInitializedAsync()
    {
        CategoryList = (await _categoryService.GetAllCategories()).ToList();
        foreach (var cat in CategoryList)
        {
            if (NameOfCategory == cat.CategoryName)
            {
                categoryModel = cat;
            }
        }

        ProductList = (await _productService.GetAllProductsByCategory(categoryModel.CategoryId));

    }

    void ShowEditProduct( string prodname, string categoryName)
    {
        NavigationManager.NavigateTo($"/productedit/{prodname}/{categoryName}");
    }

    void ShowCreateProduct(string CategoryName)
    {
        NavigationManager.NavigateTo($"/CreateProduct/{CategoryName}");
    }

    private async Task AddtoBaskett(ProductModel product)
    {
        await _basketService.AddToBasket(product);

    }

    private async Task DeleteProduct(Guid id)
    {
        await _productService.DeleteProductAsync(id);
    }
}
